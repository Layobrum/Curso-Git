# COMANDOS GIT #

## BOAS PRATICAS E OUTRAS INFORMAÇÕES ##
Ao utilizar git é muito importante SEMPRE verificar o status do repositório (git status), seja antes ou depois de adicionar ao stage, antes ou depois do commit e etc.

É possível adicionar + de 1 parametro em git usando `&&`, por exemplo:
$ git add . && git status # o git já adicionará ao stage e em seguida mostrará o status

Ao colocar um comando qualquer e apertar `tab` duas vezes, será mostrado uma lista do que se pode fazer com aquele comando.
Exemplo ao utilizar com `$ git branch`: $ git branch
FETCH_HEAD     HEAD           master         mercado-pago   whatsapp 

## INTERAÇÃO COM O REPOSITORIO ##
$ git init # inicializa o git (cria um repositorio, seja ele sem arquivos ou com arquivos ja existentes na pasta)

$ git status # mostra se tem arquivos no stage, quais são eles e o status atual do repositorio git
Exemplo de resposta: 
On branch master # mostra qual branch estamos

No commits yet # mostra que não fizemos commits ainda

Untracked files: # arquivos não rastreados (arquivos modificados e não adicionados ao stage, que é o estágio antes do commit)
  (use "git add <file>..." to include in what will be committed)
        index.html

nothing added to commit but untracked files present (use "git add" to track) # da uma luz dizendo pra gente commitar kkk

$ git log # puxa um histório de commits do repositorio
Exemplo de resposta:
commit c39f3e5ecc89975e44a96b3042749048f84d296b (HEAD -> master) # mostra o id do commit + o branch
Author: Layo Brum <layobmedeiros@gmail.com> # mostra o autor do commit
Date:   Sun Jun 1 11:52:32 2025 -0300 # mostra a data

    Adicionado arquivo style.css # mostra a mensagem do commit

commit e32f97b8468ddacda129f1e06be9c87e0591dced
Author: Layo Brum <layobmedeiros@gmail.com>
Date:   Sun Jun 1 11:48:12 2025 -0300

    Adicionado arquivo index.html
# Quando houver muitos arquivos no log, é possível mexer o histórico com as setas do teclado ou com o enter. Apertar `Q` (quit) para sair

$ git log --oneline # mostra o histórico de uma forma condensada (em uma linha)
Exemplo de resposta:
c39f3e5 (HEAD -> master) Adicionado arquivo style.css # mostra o id do commit, o branch e a mensagem dele
e32f97b Adicionado arquivo index.html

## INTERAÇÃO COM OS ARQUIVOS ##
$ git add index.html # adiciona arquivos no stage (estagio antes do commit)
Exemplo: git add [nome do arquivo] # caso o nome do arquivo seja preenchido com um `.`, o comando adicionará todos os arquivos modificados

$ git rm --cached index.html # remove arquivos do stage
Exemplo: git rm --cached [nome do arquivo] # o `.` não funciona aqui

$ git commit -m "Adicionado arquivo index.html" # função para commitar (tirar do stage e botar no ar definitivamente)
Exemplo: git commit -m [mensagem do commit] # aqui o -m significa que enviaremos uma mensagem de commit

Exemplo de resposta:
[master (root-commit) e32f97b] Adicionado arquivo index.html # mostra o branch (master = main), o id do commit (e32f97b) e a mensagem que enviamos (Adicionado arquivo index.html)
 1 file changed, 0 insertions(+), 0 deletions(-) # um resumo do commit, mostrando quantos arquivos foram alterados, insertions e deletions (?)
 create mode 100644 index.html

$ touch .gitignore # cria o arquivo `.gitignore`, que rastrea quais arquivos devem ser ignorados pelo git e não serem postados no repositório
(todos os arquivos marcados no gitignore não serão considerados no git)

## COMANDOS PARA "VOLTAR NO TEMPO" E/OU RECUPERAR ARQUIVOS
$ git checkout 12fa6c3 # volta no commit cujo id tenha sido passado para check de informações, quase como uma volta no tempo mesmo (os arquivos no projeto irão voltar da maneira que estavam no id deste commit)
Exemplo: git checkout [id do commit] # preencher o id do commit com `master` ou `main` irá retornar tudo ao normal e voltar ao projeto como estava antes do comando checkout

$ git revert eaf26ae # reverte 1 commit realizado, fazendo com que o repositório continue o mesmo, apenas sem aquele commit. Essa reversão aparece no histórico (log) do repositório
Exemplo: git revert [id do commit]

$ git reset 12fa6c3 --hard# volta o repositório no tempo do commit passado, exlue tudo após este commit e deleta isso do log (histórico).
Caso o comando seja usado sem o `--hard`, algumas alterações podem permanecer e isso pode ser interessante para tirar tantos commits do histórico e deixar o arquivo igual ao que deveria, porém excluindo tantos commits que tenham sido feitos
Exemplo: git reset [id do commit] [--hard (opcional)]

## COMANDOS DE BRANCH ##

$ git branch # mostra os branches existentes no momento e marca com um `*` em qual estamos
$ git branch teste # cria um branch novo com o nome `teste`
Exemplo: git branch [nome do branch]

$ git checkout teste # assim como voltar no tempo, o git checkout também mexe com as linhas do tempo, ou seja, pode entrar nos branches. Aqui estamos entrando no branch `teste`
Exemplo: git checkout [nome do branch]

$ git branch -d teste # deleta o branch `teste`. Se houver alterações não juntadas com o branch principal, é necessário usar `-D` novamente.
Exemplo: git branch -[d/-D] [nome do branch] 

Para fazer o merge, é necessário ir para o branch de destino (neste caso o main/master)
$ git merge mercado-pago # fará o merge (juntará) o branch mercado-pago no branch main
Exemplo: (no branch de destino) git merge [nome do branch]

Para resolver conflitos, basta escolher quais e como agir com eles, assim como escolher qual manter e então commitar normalmente. Nesse caso não precisa adicionar uma mensagem, pois a padrão já é boa o suficiente.
Exemplo: $git commit